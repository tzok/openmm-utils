#! /usr/bin/env python
import argparse
import subprocess
import sys
import tempfile
from typing import IO

from openmm import NonbondedForce, VariableLangevinIntegrator, unit
from openmm.app import AmberInpcrdFile, AmberPrmtopFile, HBonds, PDBFile, Simulation


def bootstrap_amber(pdb_file: IO):
    with tempfile.NamedTemporaryFile() as prmtop_file:
        with tempfile.NamedTemporaryFile() as inpcrd_file:
            with tempfile.NamedTemporaryFile("rt+") as script:
                # Generate the tleap script
                script.write("source leaprc.water.tip3p\n")
                script.write("source leaprc.DNA.OL15\n")
                script.write("source leaprc.RNA.OL3\n")
                script.write(f"molecule = loadpdb {pdb_file.name}\n")
                script.write(
                    f"saveamberparm molecule {prmtop_file.name} {inpcrd_file.name}\n"
                )
                script.write("quit\n")
                script.flush()

                # Run tleap
                subprocess.run(
                    ["tleap", "-f", script.name], capture_output=True, check=True
                )

            # Load the prmtop and inpcrd files generated by tleap
            prmtop = AmberPrmtopFile(prmtop_file.name)
            inpcrd = AmberInpcrdFile(inpcrd_file.name)
            system = prmtop.createSystem(constraints=HBonds)
            return system, prmtop.topology, inpcrd.positions


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input", help="(optional) Path to a PDB file (default is stdin)"
    )
    parser.add_argument(
        "--output",
        help="(optional) Path to output PDB file to contain structure after minimization (default is no output)",
    )
    args = parser.parse_args()

    with tempfile.NamedTemporaryFile(suffix=".pdb") as pdbfixer_file:
        with tempfile.NamedTemporaryFile("rt+", suffix=".pdb") as input_file:
            if args.input is None:
                content = sys.stdin.read()
            else:
                with open(args.input) as f:
                    content = f.read()

            with input_file.file as f:
                f.write(content)

            # Introduce general fixes
            subprocess.run(
                [
                    "pdbfixer",
                    input_file.name,
                    f"--output={pdbfixer_file.name}",
                    "--replace-nonstandard",
                ],
                capture_output=True,
                check=True,
            )

        # Further normalize the PDB file
        with tempfile.NamedTemporaryFile("r+", suffix=".pdb") as pdb_file:
            subprocess.run(
                [
                    "pdb4amber",
                    "--in",
                    pdbfixer_file.name,
                    "--out",
                    pdb_file.name,
                    "--nohyd",
                    "--dry",
                    "--amber-compatible-residues",
                    "--noter",
                    "--strip",
                    "@P,OP1,OP2,OP3",
                ],
                capture_output=True,
                check=True,
            )

            # Load the PDB into Amber system / topology / positions
            try:
                system, topology, positions = bootstrap_amber(pdb_file)
            except subprocess.CalledProcessError as ex:
                print(
                    "Failed to load the PDB into Amber system\n"
                    + f"Command: {ex.cmd}\n"
                    + f"Return code: {ex.returncode}\n"
                    + f"Standard output: {ex.stdout.decode()}\n"
                    + f"Standard error: {ex.stderr.decode()}"
                )

        # Set all charges to zero to disable electrostatics.
        # Otherwise PDBs without explicit solvent get ridiculous high energy
        for force in system.getForces():
            if isinstance(force, NonbondedForce):
                for i in range(force.getNumParticles()):
                    charge, sigma, epsilon = force.getParticleParameters(i)
                    force.setParticleParameters(
                        i, 0 * unit.elementary_charge, sigma, epsilon
                    )

        # Create a simulation
        integrator = VariableLangevinIntegrator(
            300 * unit.kelvin, 1.0 / unit.picosecond, 0.002 * unit.picoseconds
        )
        simulation = Simulation(topology, system, integrator)
        simulation.context.setPositions(positions)

        # Compute the energy
        state = simulation.context.getState(getEnergy=True)
        energy = [state.getPotentialEnergy().value_in_unit(unit.kilocalories_per_mole)]

        # Perform energy minimization
        simulation.minimizeEnergy()

        # Compute the energy
        state = simulation.context.getState(getEnergy=True)
        energy.append(
            state.getPotentialEnergy().value_in_unit(unit.kilocalories_per_mole)
        )
        print(energy[0], energy[1])

        if args.output is not None:
            # Save the minimized structure
            with open(args.output, "w") as output:
                PDBFile.writeModel(
                    simulation.topology,
                    simulation.context.getState(getPositions=True).getPositions(),
                    output,
                )
